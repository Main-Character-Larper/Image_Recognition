import cv2
import os
import pytesseract
from collections import defaultdict

# Initialize Tesseract path if needed (example for Windows)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Path to your images and templates
image_folder = "C:/T3C_Images"
template_folder = "C:/Templates"

# List of all images to process
images = [f"{image_folder}/T3C_{i}.png" for i in range(1, 9)]

# Load your templates here (assuming .png format)
templates = {}
template_files = {
    "7.92": "7.92.png",
    "Argenti": "Argenti.png",
    # Add more objects as needed
}

# Load templates with error checking
for obj_name, file_name in template_files.items():
    template_path = os.path.join(template_folder, file_name)
    template = cv2.imread(template_path, 0)  # Read as grayscale
    if template is None:
        print(f"Error: Could not load template {file_name} from {template_path}. Check the file path.")
    else:
        templates[obj_name] = template

# Initialize the results dictionary
results = defaultdict(int)


# Function to match template and read the number
def match_and_read_number(image, template):
    if image is None or template is None:
        return 0

    res = cv2.matchTemplate(image, template, cv2.TM_CCOEFF_NORMED)
    threshold = 0.95  # Adjust this threshold for accuracy
    loc = cv2.threshold(res, threshold, 1, cv2.THRESH_BINARY)[1]

    # Find all match locations
    match_locations = cv2.findNonZero(loc)

    total_count = 0

    if match_locations is not None:
        for pt in match_locations:
            x, y = pt[0][0], pt[0][1]

            # Define ROI around the lower right corner of the detected object
            h, w = template.shape
            roi_x_start = x + int(w * 0.7)
            roi_y_start = y + int(h * 0.7)
            roi_x_end = x + w
            roi_y_end = y + h

            # Extract the ROI
            roi = image[roi_y_start:roi_y_end, roi_x_start:roi_x_end]

            # Use pytesseract to read the number
            detected_number = pytesseract.image_to_string(roi,
                                                          config='--psm 8 -c tessedit_char_whitelist=0123456789').strip()

            try:
                number = int(detected_number)
                total_count += number
            except ValueError:
                # If OCR fails to detect a number, just skip it
                continue

    return total_count


# Process each image
for img_path in images:
    # Read the image in grayscale
    img = cv2.imread(img_path, 0)
    if img is None:
        print(f"Error: Could not load image {img_path}. Skipping.")
        continue

    for obj_name, template in templates.items():
        count = match_and_read_number(img, template)
        results[obj_name] += count

# Print or return the results
for obj_name, total_count in results.items():
    print(f"Total {obj_name}: {total_count}")
